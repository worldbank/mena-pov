rm(list=ls())
#Define relative path
knitr::opts_knit$set(root.dir = '/Users/ashitakarl/Dropbox/WB/MENA_WorldBank/')
knitr::opts_chunk$set(echo = TRUE)
YEAR_LIST <- c(2000, 2005, 2010, 2015, 2020)
length(YEAR_LIST)
YEAR_LIST[1] + 1
1:length(YEAR_LIST) - 1
(length(YEAR_LIST) - 1)
rm(list=ls())
#Define relative path
knitr::opts_knit$set(root.dir = '/Users/ashitakarl/Dropbox/WB/MENA_WorldBank/')
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(terra)
library(tidyverse)
library(ggplot2)
library(sf)
library(ncdf4)
#Confirm path
dir_shp <- './Boundaries/'                                                                                                            #Confirm path
dir_temp <- '/Users/ashitakarl/Desktop/Project/WB/Raw data/Temperature 2000-2021/'                    #Confirm path
dir_index <- './Index/'
CRS_WGS <- '+proj=longlat +datum=WGS84 +no_defs'
#Function to extract values
desc_stats_fun <- function(clipped, shp){
# Estimate basic stats per rayon
stats <- terra::extract(x = clipped, y = shp, touches= T, na.rm = T, df = TRUE)
colnames(stats)[1:2] <- c('ID', 'value')
desc_stats <- stats %>%
group_by(ID) %>%
summarise(mean = mean(value, na.rm=TRUE),
max = max(value, na.rm=TRUE),
min = min(value, na.rm=TRUE),
median = median(value, na.rm=TRUE),
std = sd(value, na.rm=TRUE),
obs = n())
return(desc_stats)
}
# Prepare for loop
# Load shapefile
shape <- read_sf(paste0(dir_shp, 'MENA_ADM2.shp')) %>%                            #Change filename
st_transform(CRS_WGS) %>%
st_make_valid() %>%
# The Number of districts
mutate(ID = seq.int(1, n()))
shape_df <- shape %>%
st_drop_geometry() %>%
dplyr::select(c(ID, ID_ADM))
#PREPARE LOOP OVER MONTHS
months <- c(paste0('0', c(1:9)), 10:12)
years <- seq(2000, 2020, 1)
#Create data frame
df_stat <- data.frame()
#Extract temperature values
for (YEAR in years) {
for(MONTH in months) {
raster <- brick(paste0(dir_temp, 'GLDAS_NOAH10_M.A', YEAR, MONTH, '.021.nc4'), varname = 'SoilMoi0_10cm_inst')
clipped <- terra::crop(raster, shape)
# stats at national level
df_temp <- desc_stats_fun(clipped, shape) %>%
mutate(years = YEAR,
months = MONTH)
df_stat <- bind_rows(df_stat, df_temp)
}
}
dir_temp <- '/Users/ashitakarl/Desktop/Project/WB/Raw data/Temperature 2000-2022/'                    #Confirm path
df_stat <- data.frame()
#Extract temperature values
for (YEAR in years) {
for(MONTH in months) {
raster <- brick(paste0(dir_temp, 'GLDAS_NOAH10_M.A', YEAR, MONTH, '.021.nc4'), varname = 'SoilMoi0_10cm_inst')
clipped <- terra::crop(raster, shape)
# stats at national level
df_temp <- desc_stats_fun(clipped, shape) %>%
mutate(years = YEAR,
months = MONTH)
df_stat <- bind_rows(df_stat, df_temp)
}
}
df_stat <- df_stat %>%
left_join(shape_df, by = 'ID')
month_levels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Create col by month name
df_stat <- df_stat %>%
mutate(months = as.numeric(months),
month = month.abb[months],
month = factor(month, levels = month_levels))
YEAR_LIST <- c(2000, 2005, 2010, 2015, 2020)
df_full <- data.frame()
for (i in 1:(length(YEAR_LIST) - 1)) {
YEAR_BEGIN <- YEAR_LIST[1] + 1
YEAR_END <- YEAR_LIST[2] + 1
df1 <- df_stat %>%
filter(years >= YEAR_BEGIN & years <= YEAR_END) %>%
group_by(ID_ADM, month)%>%
dplyr::summarise(value = mean(mean))
df2 <- df1 %>%
group_by(ID_ADM) %>%
mutate(lag = lag(value)) %>%
mutate(month.change = (lag - value)) %>%
ungroup() %>%
mutate(abs_value= abs(month.change) %>% as.numeric())
df2 <- df2 %>%
group_by(ID_ADM)%>%
mutate(mean_val = mean(abs_value, na.rm = TRUE))
diff_temp <- df2 %>%
group_by(ID_ADM) %>%
dplyr::summarise(average_diff_temp = mean(abs_value, na.rm = TRUE))
colnames(diff_temp)[2] <- paste0('TEMP_DIFF_', YEAR_BEGIN, '_', YEAR_END)
df_full <- left_join(df_full, diff_temp, by = 'ID_ADM')
}
df_full <- data.frame(shape_df$ID_ADM)
View(df_full)
df_full <- shape_df %>%
dplyr::select(c(ID_ADM))
View(df_full)
for (i in 1:(length(YEAR_LIST) - 1)) {
YEAR_BEGIN <- YEAR_LIST[1] + 1
YEAR_END <- YEAR_LIST[2] + 1
df1 <- df_stat %>%
filter(years >= YEAR_BEGIN & years <= YEAR_END) %>%
group_by(ID_ADM, month)%>%
dplyr::summarise(value = mean(mean))
df2 <- df1 %>%
group_by(ID_ADM) %>%
mutate(lag = lag(value)) %>%
mutate(month.change = (lag - value)) %>%
ungroup() %>%
mutate(abs_value= abs(month.change) %>% as.numeric())
df2 <- df2 %>%
group_by(ID_ADM)%>%
mutate(mean_val = mean(abs_value, na.rm = TRUE))
diff_temp <- df2 %>%
group_by(ID_ADM) %>%
dplyr::summarise(average_diff_temp = mean(abs_value, na.rm = TRUE))
colnames(diff_temp)[2] <- paste0('TEMP_DIFF_', YEAR_BEGIN, '_', YEAR_END)
df_full <- left_join(df_full, diff_temp, by = 'ID_ADM')
}
df_full <- shape_df %>%
dplyr::select(c(ID_ADM))
for (i in 1:(length(YEAR_LIST) - 1)) {
YEAR_BEGIN <- YEAR_LIST[i] + 1
YEAR_END <- YEAR_LIST[i+1] + 1
df1 <- df_stat %>%
filter(years >= YEAR_BEGIN & years <= YEAR_END) %>%
group_by(ID_ADM, month)%>%
dplyr::summarise(value = mean(mean))
df2 <- df1 %>%
group_by(ID_ADM) %>%
mutate(lag = lag(value)) %>%
mutate(month.change = (lag - value)) %>%
ungroup() %>%
mutate(abs_value= abs(month.change) %>% as.numeric())
df2 <- df2 %>%
group_by(ID_ADM)%>%
mutate(mean_val = mean(abs_value, na.rm = TRUE))
diff_temp <- df2 %>%
group_by(ID_ADM) %>%
dplyr::summarise(average_diff_temp = mean(abs_value, na.rm = TRUE))
colnames(diff_temp)[2] <- paste0('TEMP_DIFF_', YEAR_BEGIN, '_', YEAR_END)
df_full <- left_join(df_full, diff_temp, by = 'ID_ADM')
}
df_full <- shape_df %>%
dplyr::select(c(ID_ADM))
for (i in 1:(length(YEAR_LIST) - 1)) {
YEAR_BEGIN <- YEAR_LIST[i] + 1
YEAR_END <- YEAR_LIST[i+1]
df1 <- df_stat %>%
filter(years >= YEAR_BEGIN & years <= YEAR_END) %>%
group_by(ID_ADM, month)%>%
dplyr::summarise(value = mean(mean))
df2 <- df1 %>%
group_by(ID_ADM) %>%
mutate(lag = lag(value)) %>%
mutate(month.change = (lag - value)) %>%
ungroup() %>%
mutate(abs_value= abs(month.change) %>% as.numeric())
df2 <- df2 %>%
group_by(ID_ADM)%>%
mutate(mean_val = mean(abs_value, na.rm = TRUE))
diff_temp <- df2 %>%
group_by(ID_ADM) %>%
dplyr::summarise(average_diff_temp = mean(abs_value, na.rm = TRUE))
colnames(diff_temp)[2] <- paste0('TEMP_DIFF_', YEAR_BEGIN, '_', YEAR_END)
df_full <- left_join(df_full, diff_temp, by = 'ID_ADM')
}
View(df_full)
rm(list=ls())
#Define relative path
knitr::opts_knit$set(root.dir = '/Users/ashitakarl/Dropbox/WB/MENA_WorldBank/')
library(BBmisc)
library(ggplot2)
library(tidyverse)
library(sf)
library(RColorBrewer)
library(classInt)
library(ggrepel)
library(viridis)
dir_shp <- './Boundaries/'                                                                   #Confirm path
dir_in <- './Index/ADM2/Input/'                                                              #Confirm path
dir_out <- './Index/ADM2/'                                                                   #Confirm path
dir_fig <- './Index/ADM2/Maps/'                                                              #Confirm path
dir_ras <- '/Users/ashitakarl/Desktop/Project/WB/MENA/Vectorized/'                               #Confirm path
#set CRS of shapefiles to WGS84
CRS_uni <- '+proj=longlat +datum=WGS84 +no_defs'
# Load the shapefile of the country
shape <- read_sf(paste0(dir_shp, 'MENA_ADM2.shp')) %>%                            #Change filename
st_transform(CRS_uni) %>%
st_make_valid() %>%
# The Number of districts
mutate(ID = seq.int(1, n()),
area_sqkm = st_area(.) / 1000000,
ID_ADM = as.numeric(ID_ADM))
shape_0 <- read_sf(paste0(dir_shp, 'MENA_Country.shp')) %>%                            #Change filename
st_transform(CRS_uni) %>%
st_make_valid()
shape_border <- read_sf(paste0(dir_shp, 'MENA_ADM0.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
options(scipen = 999)
# Load raster data (vectorized): Population 2000
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2000.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2000.png')), height= 12, width = 16, units = c("in"))
# Load raster data (vectorized): Population 2005
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2005.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2005.png')), height= 12, width = 16, units = c("in"))
# Load raster data (vectorized): Population 2010
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2010.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2010.png')), height= 12, width = 16, units = c("in"))
# Load raster data (vectorized): Population 2015
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2015.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2015.png')), height= 12, width = 16, units = c("in"))
# Load raster data (vectorized): Population 2020
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2020.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2020.png')), height= 12, width = 16, units = c("in"))
raster_temp <- read_sf(paste0(dir_ras, 'Pop_2010.shp')) %>%
st_transform(CRS_uni) %>%
st_make_valid()
# Population
ggplot() + geom_sf(data = shape_border, fill = 'white',
size = 1, color = 'blue4') +
geom_sf(data = raster_temp, aes(fill = log(DN)), color = NA) +
scale_fill_gradient2(limits = c(0, 12),
name = 'Population\nCount (log)',
high = 'blue', low = 'white') +
theme_void()
ggsave(paste0(dir_fig, paste0('/MENA/Raster/Population_2010.png')), height= 12, width = 16, units = c("in"))
rm(list=ls())
#Define relative path
knitr::opts_knit$set(root.dir = '/Users/ashitakarl/Dropbox/WB/Balkans_WorldBank/')
library(BBmisc)
library(ggplot2)
library(tidyverse)
library(sf)
library(RColorBrewer)
library(classInt)
library(ggrepel)
library(viridis)
dir_shp <- './Boundaries/'                                                              #Confirm path
dir_in <- './Index/Input/'                                                              #Confirm path
dir_out <- './Index/Output/'                                                            #Confirm path
dir_fig <- './Index/Maps/'                                                              #Confirm path
dir_ras <- '/Users/ashitakarl/Desktop/Project/WB/GEO/Rasters/'                          #Confirm path
#set CRS of shapefiles to WGS84
CRS_uni <- '+proj=longlat +datum=WGS84 +no_defs'
# Load the shapefile of the country
shape <- read_sf(paste0(dir_shp, 'Balkans_ADM2.shp')) %>%                            #Change filename
st_transform(CRS_uni) %>%
st_make_valid() %>%
rename(ID_ADM = OBJECTID) %>%
# The Number of districts
mutate(ID = seq.int(1, n()),
area_sqkm = st_area(.) / 1000000,
ID_ADM = as.numeric(ID_ADM))
